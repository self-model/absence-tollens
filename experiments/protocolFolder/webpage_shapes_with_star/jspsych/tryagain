var jsShapes = (function (jspsych) {
    "use strict"; // what is this 
    
      const info = {
        name: 'jsShapes',
        parameters: {
          left_shape: {
            type: jspsych.ParameterType.STRING,
            pretty_name: "Left shape",
            description: "The shape shown on the left. Either circle, not-circle or occluded",
            default: ['circle', 'not-circle', 'occluder']
          },
          right_shape: {
            type: jspsych.ParameterType.STRING,
            pretty_name: "Right shape",
            description: "The shape shown on the right. Either triangle, not-triangle or occluded",
            default: ['triangle', 'not-triangle', 'occluder']
          },
          choices: {
            type: jspsych.ParameterType.STRING,
            pretty_name: "Choices",
            description: "Choice keys. The first one corresponds to the option on the left and the other one on the right.",
            default: ['s','g']
          },
          post_click_delay: {
            type: jspsych.ParameterType.INT,
            pretty_name: "Post click delay",
            default: 200,
            description: "Time to display choice before moving to the next screen (ms)"
          }
        }
      }

    /**
     * **PLUGIN-NAME**
     *
     * SHORT PLUGIN DESCRIPTION
     *
     * @author 
     * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}
     */

    class JsShapes { 
      constructor(jsPsych) {
        this.jsPsych = jsPsych;
      }

      trial(display_element, trial) {
  
        //open a p5 sketch
        let sketch = (p) => {
  
            const du = p.min([window.innerWidth, window.innerHeight, 600])*7/10 //drawing unit

           // some layout from matan for text but we dont need to randomise what 's' and 'g' stand for. 
           // NEEDS CLEANING UP because response is not really needed here but then WHERE do we define response HELP
            var draw_choices = () => {
            p.textFont('Noto Sans Mono');
            p.push()
            p.textSize(15)
            p.fill('white') 
            p.translate(window.innerWidth/3,40)
            p.text('press S',0,0)
            p.translate(window.innerWidth/3,0) // you dumbass there's no pop() so translate is ADDITIONAL 
            p.text('press G',0,0)
            p.pop()
            };

            // set up polygon? idk if this is wise but the programme seems happier this way 
            function polygon(x, y, radius, npoints) {
              var angle = p.TWO_PI / npoints;
              p.beginShape();
              for (var a = 0; a < p.TWO_PI; a += angle) {
                var sx = x + p.cos(a) * radius;
                var sy = y + p.sin(a) * radius;
                p.vertex(sx, sy);
              }
              p.endShape(p.CLOSE);}
            
            // rectMode ?
            // sorry matan i'm gonna change the parallellogram to a square because i need to be able to define their centre. they're WONKY rn and my memory is not so good that i am able OR willing to remember the basic maths from high school about how to find the centre of that (maybe zwaartelijnen)
            var draw_shapes = [
              () => { p.circle(0,0,60);},
              () => { p.triangle(-30,30,0,-30,30,30);}, 
              () => { p.quad(-40,0,0,-40,40,0,0,40);}, // diamond dancer 
              () => { polygon(0,0,40,5);},
              () => { p.square(-30,-30,60);},
              // () => { p.quad(0,0,65,0,100,50,30,50);}, SORRY 
            ]

            // FUNCTION TO PICK WHICH SHAPE TO DRAW 
            // need to define this OUTSIDE of p.setup and p.draw function or it'll twitch like crazy (funtimes) 
            let left_shape_index;
            if (trial.left_shape === 'circle'){
              left_shape_index = 0;
            } else if (trial.left_shape === 'not-circle'){
              left_shape_index = Math.floor(Math.random()*4) + 1
            }

            let right_shape_index;
            if (trial.right_shape === 'triangle'){
              right_shape_index = 1;
            } else if (trial.right_shape === 'not-triangle'){ // this is to make sure it randomly picks one from the shapes array out of option: 0,2,3,4
              const rightShapeOption = [0,2,3,4];
              const randomIndex = Math.floor(Math.random()*rightShapeOption.length);
              right_shape_index = rightShapeOption[randomIndex];
            }

            // FUNCTION TO DRAW SHAPES 
            function drawLeftShape(left_shape_index){
              draw_shapes[left_shape_index]();
            }

            function drawRightShape(right_shape_index){
              draw_shapes[right_shape_index]();
            }

            //sketch setup
            p.setup = () => {
            p.createCanvas(window.innerWidth, window.innerHeight);
            p.fill(255); // white
            p.background(128); // grey
            p.textFont('Noto Sans Mono');
            p.textAlign(p.CENTER, p.CENTER); 
            // rectMode? doesnt rly work but ok bcos using quads and stuff. maybe change the shapes but idk
            trial.response = NaN;
            trial.RT = Infinity;
            drawLeftShape(left_shape_index)
            drawRightShape(right_shape_index)
            draw_choices()  
            window.start_time = p.millis()
            };

            p.draw = () => {
              if (p.millis()-window.start_time < trial.RT + trial.post_click_delay) {
                p.background(128); //gray
                p.fill('white')
                p.stroke('black')

                // time to write an if-statement. EEK. 
                // draw left shape 
                if (trial.left_shape === 'circle' || trial.left_shape === 'not-circle'){        
                  p.push()
                  p.translate(window.innerWidth/3, 100)
                  drawLeftShape(left_shape_index);
                  p.pop()
                } else if (trial.left_shape === 'occluder'){
                  p.push()
                  p.fill('red')
                  p.stroke('red')
                  p.rect(window.innerWidth/3, 100, 100, 100); 
                  p.pop()
                }

                if (trial.right_shape === 'triangle' || trial.right_shape === 'not-triangle'){        
                  p.push()
                  p.translate(window.innerWidth*(2/3), 100)
                  drawRightShape(right_shape_index);
                  p.pop()
                } else if (trial.right_shape === 'occluder'){
                  p.push()
                  p.fill('red')
                  p.stroke('red')
                  p.rect(window.innerWidth*(2/3), 100, 100, 100); 
                  p.pop()
                } 

                // p.translate(window.innerWidth/3, 0)
                // drawRightShape(right_shape_index);
                // p.pop()

                // response choices: two shapes 

                // response choices: press S, press G, 
                p.translate(0,400)
                draw_choices()

              } else {
                p.remove()
                this.jsPsych.finishTrial(window.trial_data);
              }
            }
            

                // finish trial -> big if statement -> RT is infinite until keypress, when RT no longer infinite -> end trial 
            p.keyReleased = () => {
                var key_code = p.keyCode
                var key = String.fromCharCode(key_code).toLowerCase();
                if ((key=='g' | key=='s') & trial.RT==Infinity) {
                    trial.response = key;
                    trial.RT = p.millis()-window.start_time;
                    // data saving
                    window.trial_data = {
                        RT: trial.RT,
                        response: trial.response
                    };
                }
            }

        };
  
        let myp5 = new p5(sketch);
        }
      }
    JsShapes.info = info;
  
    return JsShapes;
})(jsPsychModule);
  